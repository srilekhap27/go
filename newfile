import { printClick, downloadClick } from '../../../src/components/Document';
import { retrieveDocument } from '../../../src/api/Api';
import { ERROR_MESSAGES } from '../../../src/utils/logger';

jest.mock('../../../src/api/Api', () => ({
    retrieveDocument: jest.fn(),
}));

jest.mock('../../../src/utils/logger', () => ({
    ERROR_MESSAGES: {
        VIEW_DOCUMENT_ERROR: 'Error viewing document',
    },
    Severity: {
        ERROR: 'error',
    },
    handleErrorAndLog: jest.fn(),
}));

describe('DocumentList utility functions', () => {
    let mockDispatch;
    let mockCreateElement;

    beforeEach(() => {
        jest.clearAllMocks();
        mockDispatch = jest.fn();
        global.URL.createObjectURL = jest.fn(() => 'mock-url');

        // Mock window.open for printClick
        global.open = jest.fn().mockReturnValue({
            print: jest.fn(),
            onafterprint: jest.fn(),
            close: jest.fn(),
        });

        // Mock document.createElement for downloadClick
        mockCreateElement = document.createElement;
        document.createElement = jest.fn().mockReturnValue({
            click: jest.fn(),
            href: '',
            download: '',
        });
    });

    afterEach(() => {
        document.createElement = mockCreateElement;
    });

    it('should print a document when printClick is called successfully', async () => {
        retrieveDocument.mockResolvedValue([
            new Blob(['Test Document Content'], { type: 'application/pdf' }),
            200,
            { 'content-type': 'application/pdf' },
        ]);

        await printClick('mock-document-id', 'mock-display-date');

        expect(retrieveDocument).toHaveBeenCalledWith('mock-document-id', 'mock-display-date');
        expect(global.open).toHaveBeenCalledWith('mock-url');
    });

    it('should handle an error when printClick fails', async () => {
        retrieveDocument.mockRejectedValue(new Error('API failure'));

        await printClick('mock-document-id', 'mock-display-date');

        expect(retrieveDocument).toHaveBeenCalledWith('mock-document-id', 'mock-display-date');
        expect(mockDispatch).toHaveBeenCalledWith({ type: 'errors/setError', payload: ERROR_MESSAGES.VIEW_DOCUMENT_ERROR });
    });

    it('should download a document when downloadClick is called successfully', async () => {
        retrieveDocument.mockResolvedValue([
            new Blob(['Test Document Content'], { type: 'application/pdf' }),
            200,
            { 'content-type': 'application/pdf' },
        ]);

        await downloadClick('mock-document-id', 'mock-display-date');

        expect(retrieveDocument).toHaveBeenCalledWith('mock-document-id', 'mock-display-date');
        expect(document.createElement).toHaveBeenCalledWith('a');
        expect(document.createElement().click).toHaveBeenCalled();
    });

    it('should handle an error when downloadClick fails', async () => {
        retrieveDocument.mockRejectedValue(new Error('API failure'));

        await downloadClick('mock-document-id', 'mock-display-date');

        expect(retrieveDocument).toHaveBeenCalledWith('mock-document-id', 'mock-display-date');
        expect(mockDispatch).toHaveBeenCalledWith({ type: 'errors/setError', payload: ERROR_MESSAGES.VIEW_DOCUMENT_ERROR });
    });
});
