it('should log an error when printing a document and response is undefined', async () => {
        retrieveDocument.mockResolvedValue(undefined);

        const { getByTestId, getByText } = render(
            <Provider store={store}>
                <DocumentList />
            </Provider>
        );

        fireEvent.click(getByTestId('actions-0'));
        fireEvent.click(getByText('Print'));

        await waitFor(() => {
            expect(handleErrorAndLog).toHaveBeenCalledWith(
                null,
                expect.any(String), // affectedFunction
                'Failed to retrieve document contents',
                'Response array returned by retrieveDocument function is undefined',
                Severity.ERROR
            );
        });
    });

    it('should log an error when printing a document and response length is less than 2', async () => {
        retrieveDocument.mockResolvedValue([{}]); // Array with only one item

        const { getByTestId, getByText } = render(
            <Provider store={store}>
                <DocumentList />
            </Provider>
        );

        fireEvent.click(getByTestId('actions-0'));
        fireEvent.click(getByText('Print'));

        await waitFor(() => {
            expect(handleErrorAndLog).toHaveBeenCalledWith(
                null,
                expect.any(String), // affectedFunction
                'Failed to retrieve document contents',
                'Size of Response array returned by retrieveDocument function is 1. Minimum size of 2 is expected.',
                Severity.ERROR
            );
        });
    });

    it('should handle exception when printing a document and retrieveDocument throws an error', async () => {
        retrieveDocument.mockImplementation(() => {
            throw new Error('Mocked fetch error');
        });

        const { getByTestId, getByText } = render(
            <Provider store={store}>
                <DocumentList />
            </Provider>
        );

        fireEvent.click(getByTestId('actions-0'));
        fireEvent.click(getByText('Print'));

        await waitFor(() => {
            expect(handleErrorAndLog).toHaveBeenCalledWith(
                expect.any(Error),
                expect.any(String), // affectedFunction
                'Failed to retrieve document contents to view',
                '',
                Severity.ERROR
            );
        });
    });
