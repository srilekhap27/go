package main

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/s3"
)

func main() {
	// Load AWS configuration
	cfg, err := config.LoadDefaultConfig(context.TODO())
	if err != nil {
		log.Fatalf("Unable to load AWS SDK config: %v", err)
	}

	// Initialize S3 client
	s3Client := s3.NewFromConfig(cfg)

	// Specify your bucket name and batchID prefix
	bucketName := "your-bucket-name"
	batchID := "exampleBatchID"

	// List objects in the bucket with a prefix matching batchID
	listInput := &s3.ListObjectsV2Input{
		Bucket: aws.String(bucketName),
		Prefix: aws.String(batchID), // Assumes batchID is part of the object key
	}

	output, err := s3Client.ListObjectsV2(context.TODO(), listInput)
	if err != nil {
		log.Fatalf("Failed to list objects: %v", err)
	}

	fmt.Printf("Objects with batchID '%s':\n", batchID)
	for _, object := range output.Contents {
		fmt.Printf("Key: %s, Size: %d bytes\n", *object.Key, object.Size)
	}

	// Optional: Fetch object content if needed
	for _, object := range output.Contents {
		getObjectInput := &s3.GetObjectInput{
			Bucket: aws.String(bucketName),
			Key:    object.Key,
		}
		resp, err := s3Client.GetObject(context.TODO(), getObjectInput)
		if err != nil {
			log.Printf("Failed to get object %s: %v", *object.Key, err)
			continue
		}
		defer resp.Body.Close()

		// Example: Process object body (e.g., print, store, or decode)
		fmt.Printf("Content of object %s retrieved successfully\n", *object.Key)
	}
}