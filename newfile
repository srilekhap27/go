import React from 'react';
import { fireEvent, render } from '@testing-library/react';
import { Provider } from 'react-redux';
import { createStore } from '../redux/store'; // Ensure correct store path
import Document from '../components/Document'; // Ensure correct path
import * as APIHook from '../hooks/APIHook'; // Spy on APIHook
import * as Logger from '../utils/logger'; // Spy on logging functions

describe('Print Document', () => {
    it('should dispatch a call on print and open the correct URL', async () => {
        const store = createStore();
        const { getByTestId, getByText } = render(
            <Provider store={store}>
                <Document />
            </Provider>
        );

        // Mock API Hook to prevent actual API calls
        jest.spyOn(APIHook, 'useApi').mockReturnValue({
            retrieveDocument: jest.fn().mockResolvedValue([
                'Mock PDF content',
                200,
                { 'content-type': 'application/pdf' }
            ]),
        });

        // Spy on window.open
        const windowOpenSpy = jest.spyOn(window, 'open').mockImplementation(() => ({
            onload: null,
            print: jest.fn(),
            onafterprint: null,
            close: jest.fn(),
        }));

        // Mock URL.createObjectURL
        global.URL.createObjectURL = jest.fn(() => 'mockObjectURL');

        // Click actions button and print button
        fireEvent.click(getByTestId('actions-0'));
        fireEvent.click(getByTestId('print-btn'));

        // ✅ Ensure URL.createObjectURL was called with a Blob
        expect(global.URL.createObjectURL).toHaveBeenCalledWith(expect.any(Blob));

        // ✅ Ensure window.open was called with the generated URL
        expect(windowOpenSpy).toHaveBeenCalledWith('mockObjectURL');

        // ✅ Simulate print window loading and ensure it triggers print
        const mockPrintWindow = windowOpenSpy.mock.results[0].value;
        mockPrintWindow.onload();
        expect(mockPrintWindow.print).toHaveBeenCalled();

        // ✅ Ensure window closes after printing
        mockPrintWindow.onafterprint();
        expect(mockPrintWindow.close).toHaveBeenCalled();

        // Restore mock
        windowOpenSpy.mockRestore();
    });
});
