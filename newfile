import { printClick } from './yourFile'; // Update with the correct file path
import { retrieveAndHandleDocument } from './yourDependency'; // Mock dependency

jest.mock('./yourDependency', () => ({
    retrieveAndHandleDocument: jest.fn(),
}));

describe('printClick', () => {
    beforeEach(() => {
        jest.spyOn(window, 'open').mockReturnValue({
            onload: null,
            print: jest.fn(),
            onafterprint: null,
            close: jest.fn(),
        });

        global.URL.createObjectURL = jest.fn(() => 'mockObjectURL');
    });

    afterEach(() => {
        jest.restoreAllMocks();
    });

    it('should retrieve document, open a new window, and trigger print', async () => {
        const mockDocId = { selectedDocumentId: { documentId: 'doc123' } };
        const mockDisplayDate = { selectedDisplayDate: { displayDate: '2025-03-14' } };

        // Mock response data
        const mockDocumentContent = 'Test PDF content';
        const mockHeaders = { 'content-type': 'application/pdf' };
        const mockResponse = [mockDocumentContent, 200, mockHeaders];

        // Simulate callback invocation in ⁠ retrieveAndHandleDocument ⁠
        retrieveAndHandleDocument.mockImplementation((docId, date, action, callback) => {
            callback(mockResponse);
        });

        await printClick(mockDocId, mockDisplayDate);

        // ✅ Check if ⁠ retrieveAndHandleDocument ⁠ was called correctly
        expect(retrieveAndHandleDocument).toHaveBeenCalledWith(
            'doc123',
            '2025-03-14',
            expect.any(String),
            expect.any(Function)
        );

        // ✅ Check if Blob is created with correct data and type
        expect(global.URL.createObjectURL).toHaveBeenCalledWith(expect.any(Blob));

        // ✅ Check if ⁠ window.open ⁠ was called with the object URL
        expect(window.open).toHaveBeenCalledWith('mockObjectURL');

        // ✅ Simulate window onload and check if print was triggered
        const mockWindow = window.open.mock.results[0].value;
        mockWindow.onload();
        expect(mockWindow.print).toHaveBeenCalled();

        // ✅ Simulate onafterprint and check if window was closed
        mockWindow.onafterprint();
        expect(mockWindow.close).toHaveBeenCalled();
    });
});
