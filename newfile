  it('should call retrieveDocument and trigger window.open on print click', async () => {
        fetchApi.retrieveDocument.mockResolvedValue([
            new Blob(['mock document content'], { type: 'application/pdf' }),
            200,
            { 'content-type': 'application/pdf' }
        ]);

        const { getByTestId, getByText } = render(
            <Provider store={store}>
                <DocumentList />
            </Provider>
        );

        fireEvent.click(getByTestId('actions-0'));
        fireEvent.click(getByText('Print'));

        // Ensure retrieveDocument was called with correct parameters
        expect(fetchApi.retrieveDocument).toHaveBeenCalledWith(
            expect.any(String), 
            expect.any(String)
        );

        // Ensure window.open was called
        expect(window.open).toHaveBeenCalled();
    });

    it('should call retrieveDocument and create a download link on download click', async () => {
        fetchApi.retrieveDocument.mockResolvedValue([
            new Blob(['mock document content'], { type: 'application/pdf' }),
            200,
            { 'content-type': 'application/pdf' }
        ]);

        document.createElement = jest.fn(() => ({
            href: '',
            download: '',
            click: jest.fn()
        }));

        const { getByTestId, getByText } = render(
            <Provider store={store}>
                <DocumentList />
            </Provider>
        );

        fireEvent.click(getByTestId('actions-0'));
        fireEvent.click(getByText('Download'));

        // Ensure retrieveDocument was called with correct parameters
        expect(fetchApi.retrieveDocument).toHaveBeenCalledWith(
            expect.any(String), 
            expect.any(String)
        );

        // Ensure a download link is created and triggered
        expect(document.createElement).toHaveBeenCalledWith('a');
    });
});
