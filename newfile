package handler

import (
	"encoding/json"
	"errors"
	"net/http"
	"testing"
	"time"

	"github.com/aws/aws-lambda-go/events"
	"github.com/stretchr/testify/assert"
	"prodgitlab.usaa.com/grp-aws-my-documents/mydocs-cloud-commons/modules/models"
	"prodgitlab.usaa.com/grp-aws-my-documents/mydocs-cloud-commons/modules/repositories"
)

type MockDynamoDB struct {
	QueryFunc func(tableName, indexName *string, expr interface{}, limit, startKey, endKey interface{}, tableItems interface{}) error
}

func (m *MockDynamoDB) Query(tableName, indexName *string, expr interface{}, limit, startKey, endKey interface{}, tableItems interface{}) error {
	return m.QueryFunc(tableName, indexName, expr, limit, startKey, endKey, tableItems)
}

func TestGetHandler(t *testing.T) {
	tests := []struct {
		name               string
		request            events.APIGatewayProxyRequest
		dynamoDBMock       func() repositories.Connection
		expectedStatusCode int
		expectedBody       func() string
	}{
		{
			name: "Valid Batch ID",
			request: events.APIGatewayProxyRequest{
				PathParameters: map[string]string{
					"bulkBatchId": "valid-batch",
				},
			},
			dynamoDBMock: func() repositories.Connection {
				return &MockDynamoDB{
					QueryFunc: func(tableName, indexName *string, expr interface{}, limit, startKey, endKey interface{}, tableItems interface{}) error {
						docs := []models.DocumentDbRecord{
							{PartitionKey: "PARTY#123", SortKey: "DOC#guid1#DISP_DT#2024-01-01", BulkBatchID: "valid-batch"},
						}
						*t := docs
						return nil
					},
				}
			},
			expectedStatusCode: http.StatusOK,
			expectedBody: func() string {
				body, _ := json.Marshal([]ResponseBody{{
					PartitionKey: "123",
					DocumentGUID: "guid1",
					DisplayDate:  "2024-01-01",
					BulkBatchID:  "valid-batch",
				}})
				return string(body)
			},
		},
		{
			name: "Invalid Batch ID",
			request: events.APIGatewayProxyRequest{
				PathParameters: map[string]string{
					"bulkBatchId": "invalid-batch",
				},
			},
			dynamoDBMock: func() repositories.Connection {
				return &MockDynamoDB{
					QueryFunc: func(tableName, indexName *string, expr interface{}, limit, startKey, endKey interface{}, tableItems interface{}) error {
						return errors.New("DynamoDB error")
					},
				}
			},
			expectedStatusCode: http.StatusInternalServerError,
			expectedBody: func() string {
				body, _ := json.Marshal(OutputResponse{
					BatchID:      "invalid-batch",
					ErrorMessage: "Error getting items from Dynamo",
					Timestamp:    time.Now(),
				})
				return string(body)
			},
		},
		{
			name: "No Documents Found",
			request: events.APIGatewayProxyRequest{
				PathParameters: map[string]string{
					"bulkBatchId": "empty-batch",
				},
			},
			dynamoDBMock: func() repositories.Connection {
				return &MockDynamoDB{
					QueryFunc: func(tableName, indexName *string, expr interface{}, limit, startKey, endKey interface{}, tableItems interface{}) error {
						*t := []models.DocumentDbRecord{}
						return nil
					},
				}
			},
			expectedStatusCode: http.StatusNotFound,
			expectedBody: func() string {
				body, _ := json.Marshal(OutputResponse{
					BatchID:      "empty-batch",
					ErrorMessage: "No Documents found with given BatchID",
					Timestamp:    time.Now(),
				})
				return string(body)
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			h := &Handler{DynamoDB: tt.dynamoDBMock()}
			response, err := h.GetHandler(tt.request)
			assert.NoError(t, err)
			assert.Equal(t, tt.expectedStatusCode, response.StatusCode)

			var expectedOutput, actualOutput OutputResponse
			_ = json.Unmarshal([]byte(tt.expectedBody()), &expectedOutput)
			_ = json.Unmarshal([]byte(response.Body), &actualOutput)
			expectedOutput.Timestamp = actualOutput.Timestamp
			assert.Equal(t, expectedOutput, actualOutput)
		})
	}
}
