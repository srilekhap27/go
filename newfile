# MYDOCS-GET-DOCUMENTS-BY-BATCHID-LAMBDA

## Overview
This project implements an AWS Lambda function to retrieve documents using batch IDs or document GUIDs from a DynamoDB table. The function is integrated with AWS API Gateway and follows a structured approach for handling requests and responses.

## Features
- Fetch documents by **batch ID** or **document GUID**.
- Utilizes DynamoDB **Global Secondary Indexes (GSI)** for efficient querying.
- Handles API Gateway requests using structured request-response methods.
- Implements error handling and logging.

## Project Structure
```
MYDOCS-GET-DOCUMENTS-BY-BATCHID-LAMBDA
│── .idea/
│── .vscode/
│── certs/
│── internal/
│    ├── handler/
│        ├── getHandler_test.go
│        ├── getHandler.go
│── scripts/
│── vendor/
│── .gitignore
│── .gitlab-ci.yml
│── goreleaser.yml
│── coverage.html
│── go.mod
│── go.sum
│── lambda-build.sh
│── main_test.go
│── main.go
│── README.md
```

## API Endpoints
### 1. Get Documents by Batch ID
**Endpoint:** `/admin/documents/batches/{batchID}`

- Queries DynamoDB using the **BLK_BTCH_ID-PK-idx** GSI.
- Returns all documents associated with the given batch.
- Only retrieves **item keys**, excluding non-indexed columns.

### 2. Get Documents by Document GUID
**Endpoint:** `/admin/documents/{guid}`

- Uses the **DOC-GUID-PK-idx** GSI to fetch documents.
- Retrieves all members a document is delivered to.
- Only returns **item keys**, with non-indexed columns unavailable.

## Key Components
### Environment Variables
- `DOCUMENTS_TABLE`: The DynamoDB table storing documents.
- `DOC-GUID-PK-idx`: Index used for document retrieval.

### Handler Functions
#### `HandleRequest`
- Handles API Gateway requests.
- Supports **GET** requests for retrieving documents.

#### `GetDocuments`
- Fetches documents using a **document GUID**.
- Builds a **DynamoDB Key Condition Expression**.
- Parses **partition and sort keys**.
- Returns structured JSON responses.

### Response Structures
#### **Success Response**
```json
{
  "partyId": "string",
  "documentGuid": "string",
  "displayDate": "string"
}
```

#### **Error Response**
```json
{
  "docGUID": "string",
  "errorMessage": "string",
  "timestamp": "string"
}
```

## Setup & Deployment
### Prerequisites
- Go installed
- AWS CLI configured
- IAM Role with DynamoDB read permissions

### Build and Deploy
```sh
sh lambda-build.sh
```

### Running Locally
```sh
go run main.go
```

## Error Handling & Logging
- Uses `slog.JSONLogger` for structured logging.
- Returns meaningful HTTP status codes.
  - `400` - Invalid request
  - `404` - No documents found
  - `500` - Internal server error

## License
This project is licensed under the MIT License.

