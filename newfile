package handler_test

import (
	"encoding/json"
	"errors"
	"net/http"
	"testing"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-sdk-go-v2/feature/dynamodb/expression"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"prodgitlab.usaa.com/grp-aws-my-documents/mydocs-cloud-commons/modules/models"
	"prodgitlab.usaa.com/grp-aws-my-documents/mydocs-cloud-commons/modules/repositories"
	"your_project/handler"
)

type MockDynamoDB struct {
	mock.Mock
}

func (m *MockDynamoDB) Query(tableName, indexName *string, expr expression.Expression, filter, limit, lastEvaluatedKey interface{}, result interface{}) error {
	args := m.Called(tableName, indexName, expr, filter, limit, lastEvaluatedKey, result)
	return args.Error(0)
}

func (m *MockDynamoDB) BatchWriteItem(input interface{}) error {
	args := m.Called(input)
	return args.Error(0)
}

type MockConnection struct {
	DbClient *MockDynamoDB
}

func (m *MockConnection) Query(tableName, indexName *string, expr expression.Expression, filter, limit, lastEvaluatedKey interface{}, result interface{}) error {
	return m.DbClient.Query(tableName, indexName, expr, filter, limit, lastEvaluatedKey, result)
}

func (m *MockConnection) BatchWriteItem(input interface{}) error {
	return m.DbClient.BatchWriteItem(input)
}

func TestGetHandler_Success(t *testing.T) {
	mockDB := &MockDynamoDB{}
	h := &handler.Handler{
		DynamoDB: repositories.Connection{
			DbClient: mockDB,
		},
	}

	documents := []models.DocumentDbRecord{
		{
			PartitionKey: "PARTY#123",
			SortKey:      "DOC#guid123#DISP_DT#2025-01-01",
			BulkBatchID:  "batch123",
		},
	}

	mockDB.On("Query", mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything).Run(func(args mock.Arguments) {
		result := args.Get(6).(*[]models.DocumentDbRecord)
		*result = documents
	}).Return(nil)

	req := events.APIGatewayProxyRequest{
		PathParameters: map[string]string{"bulkBatchId": "batch123"},
	}

	resp, err := h.GetHandler(req)

	assert.NoError(t, err)
	assert.Equal(t, http.StatusOK, resp.StatusCode)

	var responseBody []handler.ResponseBody
	err = json.Unmarshal([]byte(resp.Body), &responseBody)
	assert.NoError(t, err)
	assert.Len(t, responseBody, 1)
	assert.Equal(t, "123", responseBody[0].PartitionKey)
	assert.Equal(t, "guid123", responseBody[0].DocumentGUID)
	assert.Equal(t, "2025-01-01", responseBody[0].DisplayDate)
	assert.Equal(t, "batch123", responseBody[0].BulkBatchID)
}

func TestGetHandler_NoDocumentsFound(t *testing.T) {
	mockDB := &MockDynamoDB{}
	h := &handler.Handler{
		DynamoDB: repositories.Connection{
			DbClient: mockDB,
		},
	}

	mockDB.On("Query", mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything).Return(nil)

	req := events.APIGatewayProxyRequest{
		PathParameters: map[string]string{"bulkBatchId": "batch123"},
	}

	resp, err := h.GetHandler(req)

	assert.NoError(t, err)
	assert.Equal(t, http.StatusNotFound, resp.StatusCode)

	var responseBody handler.OutputResponse
	err = json.Unmarshal([]byte(resp.Body), &responseBody)
	assert.NoError(t, err)
	assert.Equal(t, "batch123", responseBody.BatchID)
	assert.Equal(t, "No Documents found with given BatchID", responseBody.ErrorMessage)
}

func TestGetHandler_DynamoDBError(t *testing.T) {
	mockDB := &MockDynamoDB{}
	h := &handler.Handler{
		DynamoDB: repositories.Connection{
			DbClient: mockDB,
		},
	}

	mockDB.On("Query", mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything, mock.Anything).Return(errors.New("DynamoDB error"))

	req := events.APIGatewayProxyRequest{
		PathParameters: map[string]string{"bulkBatchId": "batch123"},
	}

	resp, err := h.GetHandler(req)

	assert.NoError(t, err)
	assert.Equal(t, http.StatusInternalServerError, resp.StatusCode)

	var responseBody handler.OutputResponse
	err = json.Unmarshal([]byte(resp.Body), &responseBody)
	assert.NoError(t, err)
	assert.Equal(t, "batch123", responseBody.BatchID)
	assert.Equal(t, "Error getting items from Dynamo", responseBody.ErrorMessage)
}
