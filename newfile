package main

import (
	"context"
	"encoding/json"
	"errors"
	"net/http"
	"testing"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
	"github.com/stretchr/testify/assert"
	"progitdlab.usaa.com/grp-aws-my-documents/mydocs-cloud-commons/modules/repositories"
	"progitdlab.usaa.com/grp-aws-my-documents/mydocs-get-documents-by-batchid-lambda/internal/handler"
)

type MockDynamoDB struct {
	repositories.DbClientInterface
	QueryFunc func(ctx context.Context, params *dynamodb.QueryInput, optFns ...func(*dynamodb.Options)) (*dynamodb.QueryOutput, error)
}

func (m *MockDynamoDB) Query(ctx context.Context, params *dynamodb.QueryInput, optFns ...func(*dynamodb.Options)) (*dynamodb.QueryOutput, error) {
	return m.QueryFunc(ctx, params, optFns...)
}

func TestHandleRequest(t *testing.T) {
	tests := []struct {
		name               string
		request            events.APIGatewayProxyRequest
		expectedStatusCode int
		expectedBody       string
	}{
		{
			name: "Valid GET Request with Data",
			request: events.APIGatewayProxyRequest{
				HTTPMethod: "GET",
				PathParameters: map[string]string{
					"bulkBatchId": "valid-batch",
				},
			},
			expectedStatusCode: http.StatusOK,
			expectedBody:       `[{"PartitionKey":"123","DocumentGUID":"guid1","DisplayDate":"2024-01-01","BulkBatchID":"valid-batch"}]`,
		},
		{
			name: "Valid GET Request with No Data",
			request: events.APIGatewayProxyRequest{
				HTTPMethod: "GET",
				PathParameters: map[string]string{
					"bulkBatchId": "empty-batch",
				},
			},
			expectedStatusCode: http.StatusNotFound,
			expectedBody:       `{"BatchID":"empty-batch","ErrorMessage":"No Documents found with given BatchID","Timestamp":""}`,
		},
		{
			name: "Invalid HTTP Method",
			request: events.APIGatewayProxyRequest{
				HTTPMethod: "POST",
			},
			expectedStatusCode: http.StatusMethodNotAllowed,
			expectedBody:       "Unsupported http request or method",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			h := MyHandler{
				Handler: handler.Handler{
					DynamoDB: repositories.Connection{
						DbClient: &MockDynamoDB{
							QueryFunc: func(ctx context.Context, params *dynamodb.QueryInput, optFns ...func(*dynamodb.Options)) (*dynamodb.QueryOutput, error) {
								if params.ExpressionAttributeValues[":batchID"].(*types.AttributeValueMemberS).Value == "valid-batch" {
									return &dynamodb.QueryOutput{
										Items: []map[string]types.AttributeValue{
											{"PartitionKey": &types.AttributeValueMemberS{Value: "PARTY#123"}, "SortKey": &types.AttributeValueMemberS{Value: "DOC#guid1#DISP_DT#2024-01-01"}, "BulkBatchID": &types.AttributeValueMemberS{Value: "valid-batch"}},
										},
									}, nil
								}
								return &dynamodb.QueryOutput{}, nil
							},
						},
					},
				},
			}
			response, err := h.handleRequest(tt.request)
			assert.NoError(t, err)
			assert.Equal(t, tt.expectedStatusCode, response.StatusCode)

			if tt.expectedBody != "" {
				var expectedOutput, actualOutput interface{}
				_ = json.Unmarshal([]byte(tt.expectedBody), &expectedOutput)
				_ = json.Unmarshal([]byte(response.Body), &actualOutput)
				assert.Equal(t, expectedOutput, actualOutput)
			}
		})
	}
}
